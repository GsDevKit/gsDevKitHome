#! /bin/bash -x
#=========================================================================
# Copyright (c) 2015 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#=========================================================================

echo "================="
echo "   GsDevKit script: $(basename $0) $*"
echo "================="

usage() {
  cat <<HELP
usage: $0 [-c] [-f] [-u] [-s <source-stone-extent-file-path>] [-l <post-load-tode-script> ] \
	  <source-stone-name> <target-stone-name> <gemstone-version>

OPTIONS
  -h
     display help
  -c
     Create <target-stone-name> and exit script. Do not perform upgrade.
  -f
     Force creation of new stone by deleting 
     $GS_HOME/gemstone/stone/<target-stone-name> directory if it exists
  -l <post-load-tode-script>
     tODE path the to tODE script that loads your application code
  -s <source-stone-extent-file-path> 
     Path to  <source-stone-name> extent file used as starting point for 
     upgrade.
  -u 
     Skip creation of <target-stone-name> and only run the upgrade step.

EXAMPLES

HELP
}

set -e # exit on error
if [ "${GS_HOME}x" = "x" ] ; then
  echo "the GS_HOME environment variable needs to be defined"; exit 1
fi

forceArg=""
snapshotFileArg="-s $GS_HOME/gemstone/stones/$sourceStoneName/extents/extent0.dbf"
createStone="true"
runUpgrade="true"
hasSnapshotFile="false"
while getopts "cfhl:s:u" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    c) runUpgrade="false";;
    f) forceArg="-f";; 
    l) postUpgradeLoadScriptPath="${OPTARG}";;
    s) 
       snapshotFileArg=" -s ${OPTARG} "
       hasSnapshotFile="true"
       ;;
    u) createStone="false";;
    *) usage; exit 1;;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 3 ]; then
  usage; exit 1
fi

sourceStoneName="$1"
targetStoneName="$2"
gsvers="$3"

sourceStonePath=$GS_HOME/gemstone/stones/$sourceStoneName
targetStonePath=$GS_HOME/gemstone/stones/$targetStoneName

cat <<EOF

Performing the GsDevKitHome upgrade for the stone $targetStoneName.

If an error occurs during execution of this script, the details of the error are
available in the topazerrors.log file.

Press the return key to continue...
EOF
read prompt

$GS_HOME/bin/stopStone $sourceStoneName
if [ "${createStone}" = "true" ] ; then
  $GS_HOME/bin/installGemStone $gsvers
  $GS_HOME/bin/createStone $forceArg -n $snapshotFileArg $targetStoneName $gsvers
  $GS_HOME/bin/installGemStone $gsvers
  cp -r $GS_HOME/tode/sys/stones/$sourceStoneName/projects/* \
        $GS_HOME/tode/sys/stones/$targetStoneName/projects
  cp -r $GS_HOME/tode/sys/stones/$sourceStoneName/home/* \
        $GS_HOME/tode/sys/stones/$targetStoneName/home
else
  if [ ${hasSnapshotFile} = "true" ] ; then
    $GS_HOME/bin/stoneNewExtent -n $snapshotFileArg $targetStoneName
  fi
fi

pushd $targetStonePath >& /dev/null
  if [ "${createStone}" = "true" ] ; then
    mkdir upgradeLog
  fi
  cd upgradeLogDir
  export upgradeLogDir="$(pwd)"
popd >& /dev/null

if [ "$runUpgrade" = "false" ] ; then
  ######### Exit after target stone created
  exit 0
fi


source $targetStonePath/stone.env
startStoneArg=""
if [ $sourceStoneName is 2.4.x ]  ; then
  startStoneArg="-C"
fi

$GS_HOME/bin/startStone $startStoneArg -b -w 5 $targetStoneName

# start standard upgrade
echo "STARTING standard upgradeImage "
$GEMSTONE/bin/upgradeImage -s $GEMSTONE_NAME << EOF

EOF

# Use default Bootstrap globals for Seaside upgrade
# start "seaside" upgrade to upgrade GLASS to 1.0-beta.9.1
echo "STARTING upgradeSeasideImage"
$GEMSTONE/seaside/bin/upgradeSeasideImage -s $targetStoneName << EOF

EOF

echo "Installing tODE"
$GS_HOME/bin/installTodeStone $targetStoneName

if [ "${postUpgradeLoadScriptPath}x" != "x" ] ;  then
  #install application code
  echo "Running /home/${postUpgradeLoadScriptPath} tODE script"

  $GS_HOME/bin/tode todeIt $targetStoneName << TODE
${postUpgradeLoadScriptPath}
TODE
fi

echo "...finished $(basename $0)"

