#! /bin/bash -x
#=========================================================================
# Copyright (c) 2015 GemTalk Systems, LLC <dhenrich@gemtalksystems.com>.
#=========================================================================

echo "================="
echo "   GsDevKit script: $(basename $0) $*"
echo "================="

usage() {
  cat <<HELP
usage: $0 [-c] [-f] [-u] [-s <source-stone-extent-file-path>] [-l <post-load-tode-script> ] \
	  <source-stone-name> <target-stone-name> <gemstone-version>

OPTIONS
  -h
     display help
  -c
     Create <target-stone-name> and exit script. Do not perform upgrade.
  -f
     Force creation of new stone by deleting 
     $GS_HOME/gemstone/stone/<target-stone-name> directory if it exists
  -l <post-load-tode-script>
     tODE path the to tODE script that loads your application code
  -s <source-stone-extent-file-path> 
     Path to  <source-stone-name> extent file used as starting point for 
     upgrade.
  -u 
     Skip creation of <target-stone-name> and only run the upgrade step.

EXAMPLES

HELP
}

set -e # exit on error
if [ "${GS_HOME}x" = "x" ] ; then
  echo "the GS_HOME environment variable needs to be defined"; exit 1
fi

forceArg=""
createStone="true"
runUpgrade="true"
hasSnapshotFile="false"
while getopts "cfhl:s:u" OPT ; do
  case "$OPT" in
    h) usage; exit 0;;
    c) runUpgrade="false";;
    f) forceArg="-f";; 
    l) postUpgradeLoadScriptPath="${OPTARG}";;
    s) 
       snapshotFile="${OPTARG}"
       hasSnapshotFile="true"
       ;;
    u) createStone="false";;
    *) usage; exit 1;;
  esac
done
shift $(($OPTIND - 1))

if [ $# -ne 3 ]; then
  usage; exit 1
fi

sourceStoneName="$1"
targetStoneName="$2"
gsvers="$3"

sourceStonePath=$GS_HOME/gemstone/stones/$sourceStoneName
targetStonePath=$GS_HOME/gemstone/stones/$targetStoneName

sourceStoneVersion="$(sed -n '2{p;q;}' $sourceStonePath/product/version.txt| awk '{print $1;}')"
majorMinorVersion="${sourceStoneVersion:0:3}"

if [ "${hasSnapshotFile}" = "false" ] ; then
  snapshotFile="$GS_HOME/gemstone/stones/$sourceStoneName/extents/extent0.dbf"
fi

cat <<EOF

Performing the GsDevKitHome upgrade from the stone "$sourceStoneName" to the
stone "$targetStoneName":

  1. executes the $GS_HOME/bin/installGemStone to install GemStone $gsvers
  2. executes the $GS_HOME/bin/createStone to create the $targetStoneName stone
  3. copy the extent0.dbf file from "$sourceStoneName to $targetStoneName
  4. create $targetStonePath/upgradeLog
  5. executes the $GEMSTONE/bin/upgradeImage script
  6. executes the $GEMSTONE/seaside/bin/upgradeSeasideImage script
  7. exeuctes the $GS_HOME/bin/installTodeStone in $targetStoneName stone
     to complete the upgrade process

If an error occurs during execution of this script, the details of the error are
available in the topazerrors.log file in the 
"$targetStonePath/upgradeLog"
directory or on stdout.

Press the return key to continue...
EOF
read prompt

$GS_HOME/bin/stopStone $sourceStoneName
if [ "${createStone}" = "true" ] ; then
  $GS_HOME/bin/installGemStone $gsvers
  $GS_HOME/bin/createStone $forceArg $targetStoneName $gsvers
  $GS_HOME/bin/stopStone $targetStoneName
fi

if [ "$majorMinorVersion" = "2.4" ]  ; then
  #Cannot use copydbf to copy a 2.4 extent to 3.x
  cp $snapshotFile $targetStonePath/extents/extent0.dbf
  chmod +w $targetStonePath/extents/extent0.dbf
else
  $GS_HOME/bin/stoneNewExtent -n -s $snapshotFile $targetStoneName
fi
rm $targetStonePath/tranlogs/tranlog*.dbf

pushd $targetStonePath >& /dev/null
  if [ "${createStone}" = "true" ] ; then
    mkdir upgradeLog
  fi
  cd upgradeLog
  export upgradeLogDir="$(pwd)"
popd >& /dev/null

if [ "$runUpgrade" = "false" ] ; then
  ######### Exit after target stone created
  exit 0
fi


source $GS_HOME/bin/defStone.env $targetStoneName
startStoneArg=""
if [ "$majorMinorVersion" = "2.4" ]  ; then
  startStoneArg="-C"
fi

$GS_HOME/bin/startStone $startStoneArg -b -w 5 $targetStoneName

# start standard upgrade
echo "STARTING standard upgradeImage "
$GEMSTONE/bin/upgradeImage -s $GEMSTONE_NAME << EOF

EOF

# Clear SystemLoginNotification #Subscriptions class variable
echo "STARTING clear SystemLoginNotification #Subscriptions class variable"
$GEMSTONE/bin/topaz -l -T50000 > $upgradeLogDir/topaz.out << EOF
output pushnew $upgradeLogDir/topazClearSystemLoginNotification.out only
set gemstone $targetStoneName

display resultcheck
level 0

set user DataCurator pass swordfish
login

display oops
iferr 1 stk
iferr 2 stack
iferr 3 input pop
iferr 4 exit 1

run
(SystemLoginNotification _classVars at: #'Subscriptions') removeAll: (SystemLoginNotification _classVars at: #'Subscriptions').
true
%
commit

logout
output pop
exit 0
EOF

# use default Bootstrap globals for Seaside upgrade
# start "seaside" upgrade to upgrade GLASS to 1.0-beta.9.1
echo "STARTING upgradeSeasideImage"
$GEMSTONE/seaside/bin/upgradeSeasideImage -s $targetStoneName << EOF

EOF

# Remove all BaselineOf* classes ... so that they will be reloaded during tODE installation
echo "STARTING remove BaselineOf* classes"
$GEMSTONE/bin/topaz -l -T50000 > $upgradeLogDir/topaz.out << EOF
output pushnew $upgradeLogDir/topazRemoveBaselines.out only
set gemstone $targetStoneName

display resultcheck
level 0

set user DataCurator pass swordfish
login

display oops
iferr 1 stk
iferr 2 stack
iferr 3 input pop
iferr 4 exit 1

run
UserGlobals associations do: [:assoc |
  assoc value isBehavior
    ifTrue: [
      | globalName |
      globalName := assoc key asString.
      (globalName ~= 'BaselineOf' and: [
           (globalName _findString: 'BaselineOf' startingAt: 1 ignoreCase: false) == 1 ])
         ifTrue: [
           GsFile gciLogServer: '  removing the baseline ', globalName printString.
           assoc value removeFromSystem ] ] ].
true
%

run
MCWorkingCopy allManagers do: [ :wc | wc packageName = 'Grease' ifTrue: [ wc unregister ] ].
true
%

commit
logout
output pop
exit 0
EOF


echo "Installing tODE"
$GS_HOME/bin/installTodeStone $targetStoneName
if [ "${createStone}" = "true" ] ; then
  if [ -d  $GS_HOME/tode/sys/stones/$sourceStoneName/projects ] ; then
    cp -r $GS_HOME/tode/sys/stones/$sourceStoneName/projects/. \
          $GS_HOME/tode/sys/stones/$targetStoneName/projects/
  fi
  if [ -d  $GS_HOME/tode/sys/stones/$sourceStoneName/home ] ; then
    cp -r $GS_HOME/tode/sys/stones/$sourceStoneName/home/. \
          $GS_HOME/tode/sys/stones/$targetStoneName/home/
  fi
fi


if [ "${postUpgradeLoadScriptPath}x" != "x" ] ;  then
  #install application code
  echo "Running /home/${postUpgradeLoadScriptPath} tODE script"

  $GS_HOME/bin/tode todeIt $targetStoneName << TODE
${postUpgradeLoadScriptPath}
TODE
fi

echo "...finished $(basename $0)"

