TDScriptLeafNode{#name:'validateStoneSysNodes',#contents:'[ :topez :objIn :tokens :command :commandNode | 
  | opts args |
  \"for help: ./validateStoneSysNodes -h\"
  command
    getOptsMixedLongShort:
      {#(\'help\' $h #\'none\').
      #(\'repair\' nil #\'none\')}
    optionsAndArguments: [ :options :operands | 
      opts := options.
      args := operands ].
  opts
    at: \'help\'
    ifAbsent: [ 
      | validateDirBlock validateFileBlock stoneRoot stoneRootDir repair rootDir dir cpTool |
      opts
        at: \'repair\'
        ifPresent: [ :ignored | repair := true ]
        ifAbsent: [ repair := false ].
      cpTool := topez toolInstanceFor: \'cp\'.
      stoneRoot := topez serverTodeStoneRoot.
      stoneRootDir := ServerFileDirectory on: stoneRoot.
      validateDirBlock := [ :dir | 
      dir exists
        ifFalse: [ 
          repair
            ifTrue: [ dir assureExistence ]
            ifFalse: [ self error: \'Missing directory: \' , dir pathName printString ] ] ].
      validateFileBlock := [ :dir :filename :nodename | 
      (dir fileExists: filename)
        ifFalse: [ 
          repair
            ifTrue: [ cpTool cp: \'/sys/stones/templates/\' , nodename to: \'/sys/stone\' ]
            ifFalse: [ 
              self
                error:
                  \'Missing file: \' , filename printString , \' in path: \'
                    , dir pathName printString ] ] ].
      validateDirBlock value: stoneRootDir.
      rootDir := stoneRootDir directoryNamed: \'root\'.
      validateDirBlock value: rootDir.
      dir := rootDir directoryNamed: \'home\'.
      validateDirBlock value: dir.
      dir := rootDir directoryNamed: \'projects\'.
      validateDirBlock value: dir.
      validateFileBlock
        value: rootDir
        value: \'homeComposition.ston\'
        value: \'homeComposition\'.
      validateFileBlock
        value: rootDir
        value: \'projectComposition.ston\'
        value: \'projectComposition\'.
      true ]
    ifPresent: [ :ignored | 
      TDManPage
        viewManPage:
          \'NAME
  validateStoneSysNodes - validateStoneSysNodes sript utility template
SYNOPSIS
  validateStoneSysNodes [-h|--help] [--repair]
DESCRIPTION
  Verifies that the minimal per-stone directory structure exists. In the following
  the minimal per-stone directory structure is shown at <stone-name> and below:

  +-$GS_HOME\\
    +-tode\\
      +-sys\\
        +-stones\\
          +-stones\\
          | +-<stone-name>\\
          |   +-root\\
          |     +-home\\
          |     +-projects\\
          |     +-homeComposition.ston
          |     +-projectComposition.ston
          +-templates\\
            +-homeComposition.ston
            +-projectComposition.ston

  The home and projects directories are empty and the homeComposition.ston and
  projectComposition.ston files are copied from $GS_HOME/tode/sys/stones/templates.

  If the --repair option is present, the minimal structure will be created. Otherwise
  an error is thrown indicating the first missing component.

EXAMPLES
  /sys/default/bin/validateStoneSysNodes --help
  /sys/default/bin/validateStoneSysNodes -h

  /sys/default/bin/validateStoneSysNodes 
  /sys/default/bin/validateStoneSysNodes --repair
\'
        topez: topez ] ]',#creationTime:DateAndTime['2014-11-14T16:19:26.4569790363311-08:00'],#modificationTime:DateAndTime['2014-11-14T17:37:50.6578350067138-08:00']}
